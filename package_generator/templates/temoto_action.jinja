#pragma once

#include "temoto_action_engine/action_base.h"
#include "temoto_action_engine/temoto_error.h"
#include "temoto_action_engine/messaging.h"

#include "{{ action_name }}/input_parameters.hpp"
#include "{{ action_name }}/output_parameters.hpp"

/**
 * @brief Class that integrates TeMoto Base Subsystem specific and Action Engine specific codebases.
 * 
 */
class TemotoAction : public ActionBase
{
public:

  TemotoAction()
  {}

  /**
   * @brief Get the Name of the action
   * 
   * @return const std::string& 
   */
  const std::string& getName()
  {
    return getUmrfNodeConst().getFullName();
  }

  virtual void updateParameters(const ActionParameters& parameters_in)
  {
  }

  input_parameters_t params_in;
  output_parameters_t params_out;

private:

  void getInputParameters()
  {
    {% if gen_input_params %}
    const auto& params{getUmrfNodeConst().getInputParameters()};

    {% for gen_param in gen_input_params -%}
    params_in.{{ gen_param["cpp_access"] }} = params.getParameterData<{{ gen_param["cpp_type"] }}>("{{ gen_param["name"] }}");
    {% endfor %}
    {% endif %}
  }

  void setOutputParameters()
  {
    {% if gen_output_params %}
    auto& params{getUmrfNode().getOutputParametersNc()};

    {% for gen_param in gen_output_params -%}
    params.setParameter("{{ gen_param["name"] }}", "{{ gen_param["type"] }}", boost::any(params_out.{{ gen_param["cpp_access"] }}));
    {% endfor %}
    {% endif %}
  }
};
