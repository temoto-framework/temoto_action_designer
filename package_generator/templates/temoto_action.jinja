#pragma once

#include "temoto_action_engine/action_base.h"
#include "temoto_action_engine/temoto_error.h"
#include "temoto_action_engine/messaging.h"

#include "TODO/input_parameters.hpp"
#include "TODO/output_parameters.hpp"

/**
 * @brief Class that integrates TeMoto Base Subsystem specific and Action Engine specific codebases.
 * 
 */
class TemotoAction : public ActionBase
{
public:
  TemotoAction()
  {}

  /**
   * @brief Get the Name of the action
   * 
   * @return const std::string& 
   */
  const std::string& getName()
  {
    return getUmrfNodeConst().getFullName();
  }

  virtual void updateParameters(const ActionParameters& parameters_in)
  {
  }

  virtual void onRun() = 0;

  bool onRunInternal()
  {
    getInputParameters();
    onRun();
    setOutputParameters();
  }

  input_parameters_t params_in;
  output_parameters_t params_out;

private:

  void getInputParameters()
  {
    const auto& params{getUmrfNodeConst().getInputParameters()};

    // Initialize fields
    {% for line_l, line_r in lines -%}
    params_in.{{ line_l }} = params.getParameterData<{{ line_r["cpp_type"] }}>("{{ line_r["param_key"] }}");
    {% endfor %}
  }

  void setOutputParameters()
  {
    const auto& params{getUmrfNode().getOutputParametersNc()};

    // Initialize fields
    {% for line_l, line_r in lines -%}
    params.setParameter()
    {% endfor %}
  }
};
